from flask import Flask, request
import os
import telebot
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# === –°–£–ü–ï–†-–ü–†–û–°–¢–ê–Ø PvP ===
active_matches = {}
match_counter = 1

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "‚öΩ PvP –¢–ï–°–¢ - –ò—Å–ø–æ–ª—å–∑—É–π /test")

@bot.message_handler(commands=['test'])
def test_command(message):
    global match_counter
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
    match_id = f"test_match_{match_counter}"
    match_counter += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á
    active_matches[match_id] = {
        'challenger_id': message.chat.id,
        'opponent_id': message.chat.id, 
        'status': 'pending'
    }
    
    print(f"üî¥ –°–û–ó–î–ê–ù –ú–ê–¢–ß: {match_id}")
    print(f"üî¥ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(active_matches)}")
    print(f"üî¥ ID –º–∞—Ç—á–∞ –≤ –∫–Ω–æ–ø–∫–µ: {match_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–†–ò–ù–Ø–¢–¨ –¢–ï–°–¢", callback_data=f"accept_{match_id}"),
    )
    
    bot.send_message(message.chat.id, 
        f"–¢–ï–°–¢–û–í–´–ô –í–´–ó–û–í\nID –º–∞—Ç—á–∞: {match_id}\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_'))
def handle_accept(call):
    match_id = call.data[7:]  # —É–±–∏—Ä–∞–µ–º "accept_"
    
    print(f"üü¢ –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê: {match_id}")
    print(f"üü¢ –ò—â–µ–º –º–∞—Ç—á: {match_id}")
    print(f"üü¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(active_matches)}")
    print(f"üü¢ –í—Å–µ –º–∞—Ç—á–∏: {list(active_matches.keys())}")
    
    # –ò—â–µ–º –º–∞—Ç—á
    match = active_matches.get(match_id)
    
    if not match:
        print(f"üî¥ –ú–ê–¢–ß –ù–ï –ù–ê–ô–î–ï–ù: {match_id}")
        bot.answer_callback_query(call.id, f"–ú–∞—Ç—á {match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üü¢ –ú–ê–¢–ß –ù–ê–ô–î–ï–ù: {match}")
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    match['status'] = 'accepted'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(call.message.chat.id, f"‚úÖ –ú–ê–¢–ß –ü–†–ò–ù–Ø–¢! ID: {match_id}")
    bot.answer_callback_query(call.id, "–£—Å–ø–µ—Ö!")
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ç—á
    del active_matches[match_id]
    print(f"üü¢ –ú–ê–¢–ß –£–î–ê–õ–ï–ù: {match_id}")

@bot.message_handler(commands=['debug'])
def debug_command(message):
    debug_text = f"üîß –î–ï–ë–ê–ì:\n–ú–∞—Ç—á–µ–π: {len(active_matches)}\n"
    for match_id, match in active_matches.items():
        debug_text += f"üéØ {match_id}: {match['status']}\n"
    
    bot.send_message(message.chat.id, debug_text)

# === –í–ï–ë–•–£–ö ===
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return 'OK', 200

@app.route('/')
def index():
    return '‚öΩ PvP Debug Bot'

if __name__ == '__main__':
    webhook_url = f"https://{os.environ.get('RENDER_SERVICE_NAME')}.onrender.com/webhook"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    print(f"Webhook: {webhook_url}")
    
    from waitress import serve
    serve(app, host="0.0.0.0", port=5000)
