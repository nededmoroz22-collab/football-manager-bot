from flask import Flask, request
import os
import telebot
import random
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# === –ü–†–û–°–¢–ê–Ø PvP –°–ò–°–¢–ï–ú–ê ===
class PvPMatch:
    def __init__(self, match_id, challenger_id, opponent_id, bet_amount=0):
        self.match_id = match_id
        self.challenger_id = challenger_id
        self.opponent_id = opponent_id
        self.bet_amount = bet_amount
        self.status = "pending"
        self.score = [0, 0]
        self.winner = None

class PvPManager:
    def __init__(self):
        self.active_matches = {}
        self.match_counter = 1
    
    def create_match(self, challenger_id, opponent_id, bet_amount=0):
        match_id = f"match_{self.match_counter}_{int(time.time())}"
        self.match_counter += 1
        
        match = PvPMatch(match_id, challenger_id, opponent_id, bet_amount)
        self.active_matches[match_id] = match
        
        print(f"üéØ –°–æ–∑–¥–∞–Ω –º–∞—Ç—á {match_id}")
        return match
    
    def get_match(self, match_id):
        return self.active_matches.get(match_id)
    
    def calculate_pvp_result(self, match):
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        goals1 = random.randint(0, 5)
        goals2 = random.randint(0, 5)
        
        match.score = [goals1, goals2]
        
        if goals1 > goals2:
            match.winner = match.challenger_id
        elif goals2 > goals1:
            match.winner = match.opponent_id
        else:
            match.winner = "draw"
        
        match.status = "finished"
        return match

pvp_manager = PvPManager()
user_usernames = {}

def get_user_club(user_id):
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∏–≥—Ä—ã"""
    clubs = ["–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–ú–∞–Ω –°–∏—Ç–∏", "–õ–∏–≤–µ—Ä–ø—É–ª—å"]
    return clubs[user_id % len(clubs)]

# === PvP –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=['start'])
def start_command(message):
    user_usernames[message.chat.id] = message.from_user.username or "–ò–≥—Ä–æ–∫"
    bot.send_message(message.chat.id, 
        "‚öΩ –¢–ï–°–¢ PvP –°–ò–°–¢–ï–ú–´\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/challenge @username - –í—ã–∑–≤–∞—Ç—å –Ω–∞ –º–∞—Ç—á\n"
        "/test - –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ")

@bot.message_handler(commands=['test'])
def test_command(message):
    """–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ"""
    try:
        match = pvp_manager.create_match(message.chat.id, message.chat.id, 0)
        
        challenge_text = "‚öîÔ∏è –¢–ï–°–¢–û–í–´–ô –í–´–ó–û–í!\n\n"
        challenge_text += f"üë§ {message.from_user.username or '–ò–≥—Ä–æ–∫'}\n"
        challenge_text += f"üèÜ {get_user_club(message.chat.id)}\n\n"
        challenge_text += "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü–†–ò–ù–Ø–¢–¨", callback_data=f"pvp_accept_{match.match_id}"),
            InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"pvp_decline_{match.match_id}")
        )
        
        bot.send_message(message.chat.id, challenge_text, reply_markup=keyboard)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞!")

@bot.message_handler(commands=['challenge'])
def challenge_command(message):
    try:
        if not message.from_user.username:
            bot.send_message(message.chat.id, "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!")
            return
        
        user_usernames[message.chat.id] = message.from_user.username
        
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /challenge @username")
            return
        
        username = parts[1].replace('@', '').strip()
        
        # –ò—â–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ —Ç–µ—Ö, –∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞
        opponent_id = None
        for uid, uname in user_usernames.items():
            if uname.lower() == username.lower():
                opponent_id = uid
                break
        
        if not opponent_id:
            bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–∞–∂–∏ –µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å /start")
            return
        
        if opponent_id == message.chat.id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è! –ò—Å–ø–æ–ª—å–∑—É–π /test")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
        match = pvp_manager.create_match(message.chat.id, opponent_id, 0)
        
        challenge_text = "‚öîÔ∏è –í–´–ó–û–í –ù–ê –ú–ê–¢–ß!\n\n"
        challenge_text += f"üë§ {message.from_user.username}\n"
        challenge_text += f"üèÜ {get_user_club(message.chat.id)}\n\n"
        challenge_text += "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü–†–ò–ù–Ø–¢–¨", callback_data=f"pvp_accept_{match.match_id}"),
            InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"pvp_decline_{match.match_id}")
        )
        
        bot.send_message(opponent_id, challenge_text, reply_markup=keyboard)
        bot.send_message(message.chat.id, f"‚úÖ –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @{username}!")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞!")

@bot.message_handler(commands=['debug'])
def debug_command(message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    debug_text = f"üîß –î–ï–ë–ê–ì PvP:\n"
    debug_text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(pvp_manager.active_matches)}\n"
    debug_text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_usernames)}\n"
    
    for match_id, match in pvp_manager.active_matches.items():
        debug_text += f"üéØ {match_id}: —Å—Ç–∞—Ç—É—Å {match.status}\n"
    
    bot.send_message(message.chat.id, debug_text)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ===
@bot.callback_query_handler(func=lambda call: call.data.startswith('pvp_accept_'))
def handle_pvp_accept(call):
    try:
        match_id = call.data[10:]
        print(f"üîÑ –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–∞—Ç—á: {match_id}")
        
        match = pvp_manager.get_match(match_id)
        
        if not match:
            bot.answer_callback_query(call.id, "‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if match.status != "pending":
            bot.answer_callback_query(call.id, "‚ùå –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return
        
        if call.message.chat.id != match.opponent_id:
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –≤—ã–∑–æ–≤!")
            return
        
        # –ú–ï–ù–Ø–ï–ú –°–¢–ê–¢–£–°!
        match.status = "accepted"
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {match.status}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        match = pvp_manager.calculate_pvp_result(match)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"‚öîÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ê–¢–ß–ê!\n\n"
        result_text += f"üèÜ {get_user_club(match.challenger_id)} {match.score[0]} - {match.score[1]} {get_user_club(match.opponent_id)}\n\n"
        
        if match.winner == "draw":
            result_text += "ü§ù –ù–ò–ß–¨–Ø!"
        else:
            winner_name = user_usernames.get(match.winner, "–ò–≥—Ä–æ–∫")
            result_text += f"üéâ –ü–û–ë–ï–î–ò–õ: {winner_name}!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        bot.send_message(match.challenger_id, result_text)
        bot.send_message(match.opponent_id, result_text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        bot.answer_callback_query(call.id, "‚úÖ –ú–∞—Ç—á –ø—Ä–∏–Ω—è—Ç!")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('pvp_decline_'))
def handle_pvp_decline(call):
    try:
        match_id = call.data[11:]
        
        match = pvp_manager.get_match(match_id)
        
        if match and match.status == "pending":
            match.status = "declined"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º
            bot.edit_message_text("‚ùå –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω", call.message.chat.id, call.message.message_id)
            bot.send_message(match.challenger_id, "‚ùå –í–∞—à –≤—ã–∑–æ–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

# === –í–ï–ë–•–£–ö ===
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return 'OK', 200

@app.route('/')
def index():
    return '‚öΩ PvP Test Bot is running!'

def set_webhook():
    webhook_url = f"https://{os.environ.get('RENDER_SERVICE_NAME')}.onrender.com/webhook"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    print(f"Webhook set to: {webhook_url}")

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=5000)
