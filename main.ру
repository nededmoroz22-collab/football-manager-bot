from flask import Flask, request
import os
import telebot
import random
import json
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# === –°–£–ü–ï–†-–ü–†–û–°–¢–ê–Ø PvP –°–ò–°–¢–ï–ú–ê (–¢–û–õ–¨–ö–û –í –ü–ê–ú–Ø–¢–ò) ===
class SimplePvPMatch:
    def __init__(self, match_id, challenger_id, opponent_id, bet_amount=0):
        self.match_id = match_id
        self.challenger_id = challenger_id
        self.opponent_id = opponent_id
        self.bet_amount = bet_amount
        self.status = "pending"
        self.score = [0, 0]
        self.winner = None

class SimplePvPManager:
    def __init__(self):
        self.active_matches = {}
        self.match_counter = 1
    
    def create_match(self, challenger_id, opponent_id, bet_amount=0):
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç—á–∏ –¥–ª—è —ç—Ç–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.clean_old_matches(challenger_id, opponent_id)
        
        match_id = f"match_{self.match_counter}_{int(time.time())}"
        self.match_counter += 1
        
        match = SimplePvPMatch(match_id, challenger_id, opponent_id, bet_amount)
        self.active_matches[match_id] = match
        
        print(f"üéØ –°–æ–∑–¥–∞–Ω –º–∞—Ç—á {match_id}")
        print(f"   –ò–≥—Ä–æ–∫–∏: {challenger_id} vs {opponent_id}")
        print(f"   –°—Ç–∞–≤–∫–∞: {bet_amount}")
        print(f"   –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(self.active_matches)}")
        
        return match
    
    def clean_old_matches(self, challenger_id, opponent_id):
        """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ pending –º–∞—Ç—á–∏ –¥–ª—è —ç—Ç–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        matches_to_remove = []
        for match_id, match in self.active_matches.items():
            if match.status == "pending" and (
                match.challenger_id == challenger_id or 
                match.opponent_id == challenger_id or
                match.challenger_id == opponent_id or 
                match.opponent_id == opponent_id
            ):
                matches_to_remove.append(match_id)
        
        for match_id in matches_to_remove:
            del self.active_matches[match_id]
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –º–∞—Ç—á: {match_id}")
    
    def get_match(self, match_id):
        match = self.active_matches.get(match_id)
        print(f"üîç –ü–æ–∏—Å–∫ –º–∞—Ç—á–∞ {match_id}: {'–Ω–∞–π–¥–µ–Ω' if match else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        print(f"   –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(self.active_matches)}")
        if match:
            print(f"   –°—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞: {match.status}")
        return match
    
    def calculate_pvp_result(self, match):
        challenger_game = get_user_game(match.challenger_id)
        opponent_game = get_user_game(match.opponent_id)
        
        power1 = challenger_game.calculate_team_power()
        power2 = opponent_game.calculate_team_power()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        total_power1 = power1 + random.randint(-10, 10)
        total_power2 = power2 + random.randint(-10, 10)
        
        power_diff = total_power1 - total_power2
        
        goals1 = max(0, int(1 + (power_diff / 15) + random.randint(0, 3)))
        goals2 = max(0, int(1 + (-power_diff / 15) + random.randint(0, 3)))
        
        match.score = [goals1, goals2]
        
        if goals1 > goals2:
            match.winner = match.challenger_id
        elif goals2 > goals1:
            match.winner = match.opponent_id
        else:
            match.winner = "draw"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
        if match.bet_amount > 0 and match.winner != "draw":
            winner_game = get_user_game(match.winner)
            prize = int(match.bet_amount * 1.8)
            winner_game.money += prize
            winner_game.save_game()
            print(f"üí∞ –í—ã–∏–≥—Ä—ã—à {prize}‚Ç¨ –∏–≥—Ä–æ–∫—É {match.winner}")
        
        match.status = "finished"
        print(f"üèÅ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω: {goals1}-{goals2}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {match.winner}")
        return match

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
pvp_manager = SimplePvPManager()
user_usernames = {}
user_games = {}

# === –ë–ê–ó–ê –ö–õ–£–ë–û–í (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞) ===
FOOTBALL_CLUBS = {
    "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥": {
        "players": [
            {"name": "–ë–µ–ª–ª–∏–Ω–≥–µ–º", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 89, "defense": 72, "salary": 120000, "value": 180000000},
            {"name": "–í–∏–Ω–∏—Å–∏—É—Å", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 88, "defense": 45, "salary": 110000, "value": 170000000},
            {"name": "–ö—É—Ä—Ç—É–∞", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 25, "defense": 90, "salary": 130000, "value": 60000000},
        ]
    },
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": {
        "players": [
            {"name": "–ü–µ–¥—Ä–∏", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 87, "defense": 68, "salary": 100000, "value": 150000000},
            {"name": "–õ–µ–≤–∞–Ω–¥–æ–≤—Å–∫–∏", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 86, "defense": 40, "salary": 120000, "value": 30000000},
            {"name": "–ê—Ä–∞—É—Ö–æ", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 50, "defense": 86, "salary": 90000, "value": 70000000},
        ]
    },
    "–ú–∞–Ω –°–∏—Ç–∏": {
        "players": [
            {"name": "–•–æ–ª–∞–Ω–Ω", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 91, "defense": 48, "salary": 150000, "value": 180000000},
            {"name": "–î–µ –ë—Ä–æ–π–Ω–µ", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 90, "defense": 65, "salary": 140000, "value": 60000000},
            {"name": "–†–æ–¥—Ä–∏", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 82, "defense": 85, "salary": 120000, "value": 100000000},
        ]
    }
}

# === –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ò–ì–†–´ ===
class AdvancedFootballManager:
    def __init__(self, user_id):
        self.user_id = user_id
        self.load_game()
        
        if not hasattr(self, 'points'):
            self.club_name = None
            self.points = 0
            self.money = 10000000
            self.week = 1
            self.players = []
    
    def save_game(self):
        game_data = {
            'club_name': self.club_name,
            'points': self.points,
            'money': self.money, 
            'week': self.week,
            'players': self.players,
        }
        try:
            with open(f'/tmp/football_save_{self.user_id}.json', 'w') as f:
                json.dump(game_data, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_game(self):
        try:
            with open(f'/tmp/football_save_{self.user_id}.json', 'r') as f:
                game_data = json.load(f)
                self.club_name = game_data['club_name']
                self.points = game_data['points']
                self.money = game_data['money']
                self.week = game_data['week'] 
                self.players = game_data['players']
        except:
            pass
    
    def select_club(self, club_name):
        if club_name in FOOTBALL_CLUBS:
            self.club_name = club_name
            club_data = FOOTBALL_CLUBS[club_name]
            self.players = club_data['players'].copy()
            self.save_game()
            return f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {club_name}!"
        return "‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def calculate_team_power(self):
        if not self.players:
            return 50
        total_power = sum(p["attack"] + p["defense"] for p in self.players)
        return total_power / len(self.players)
    
    def play_match(self):
        team_power = self.calculate_team_power()
        opponent_power = 60 + (self.week * 2) + random.randint(-10, 10)
        
        power_diff = team_power - opponent_power
        my_goals = max(0, int(1 + (power_diff / 20) + random.randint(0, 2)))
        opponent_goals = max(0, int(1 + (-power_diff / 20) + random.randint(0, 2)))
        
        if my_goals > opponent_goals:
            result = f"–ü–û–ë–ï–î–ê {my_goals}-{opponent_goals}! üéâ"
            self.points += 3
            prize = 250000
        elif my_goals == opponent_goals:
            result = f"–ù–ò–ß–¨–Ø {my_goals}-{opponent_goals} ü§ù"
            self.points += 1
            prize = 120000
        else:
            result = f"–ü–û–†–ê–ñ–ï–ù–ò–ï {my_goals}-{opponent_goals} üòî"
            prize = 60000
        
        self.money += prize
        self.week += 1
        self.save_game()
        
        return f"üéØ –ù–µ–¥–µ–ª—è {self.week-1}\n{result}\nüí∞ –ü—Ä–∏–∑: +{prize:,}‚Ç¨\nüèÜ –û—á–∫–æ–≤: {self.points}"

def get_user_game(user_id):
    if user_id not in user_games:
        user_games[user_id] = AdvancedFootballManager(user_id)
    return user_games[user_id]

def find_user_by_username(username):
    username = username.lower()
    for user_id, user_username in user_usernames.items():
        if user_username and user_username.lower() == username:
            return user_id
    return None

def send_pvp_result(match):
    challenger_game = get_user_game(match.challenger_id)
    opponent_game = get_user_game(match.opponent_id)
    
    result_text = f"‚öîÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ê–¢–ß–ê PvP!\n\n"
    result_text += f"üèÜ {challenger_game.club_name} {match.score[0]} - {match.score[1]} {opponent_game.club_name}\n\n"
    
    if match.winner == "draw":
        result_text += "ü§ù –ù–ò–ß–¨–Ø!\n"
        if match.bet_amount > 0:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –Ω–∏—á—å–µ
            challenger_game.money += match.bet_amount
            opponent_game.money += match.bet_amount
            challenger_game.save_game()
            opponent_game.save_game()
            result_text += f"üí∞ –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!"
    else:
        winner_game = get_user_game(match.winner)
        result_text += f"üéâ –ü–û–ë–ï–î–ò–õ: {winner_game.club_name}!\n"
        
        if match.bet_amount > 0:
            prize = int(match.bet_amount * 1.8)
            result_text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: {prize:,}‚Ç¨\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
    try:
        bot.send_message(match.challenger_id, result_text)
        print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–∑—ã–≤–∞—é—â–µ–º—É: {match.challenger_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–∑—ã–≤–∞—é—â–µ–º—É: {e}")
    
    try:
        bot.send_message(match.opponent_id, result_text)
        print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–ø–æ–Ω–µ–Ω—Ç—É: {match.opponent_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É: {e}")

# === PvP –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=['challenge'])
def challenge_command(message):
    try:
        if message.from_user.username:
            user_usernames[message.chat.id] = message.from_user.username
            
        game = get_user_game(message.chat.id)
        if game.club_name is None:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± —á–µ—Ä–µ–∑ /start")
            return
        
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /challenge @username [—Å—Ç–∞–≤–∫–∞]")
            return
        
        username = parts[1].replace('@', '').strip()
        bet_amount = 0
        
        if len(parts) > 2:
            try:
                bet_amount = int(parts[2])
                if bet_amount < 0:
                    bot.send_message(message.chat.id, "‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
                    return
                if game.money < bet_amount:
                    bot.send_message(message.chat.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {bet_amount:,}‚Ç¨")
                    return
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞!")
                return
        
        opponent_id = find_user_by_username(username)
        
        if not opponent_id:
            bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å —á—Ç–æ –æ–Ω –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.")
            return
        
        if opponent_id == message.chat.id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
        match = pvp_manager.create_match(message.chat.id, opponent_id, bet_amount)
        
        # –°—Ä–∞–∑—É —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        if bet_amount > 0:
            game.money -= bet_amount
            game.save_game()
            print(f"üí∞ –°–ø–∏—Å–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ {bet_amount}‚Ç¨ —Å {message.chat.id}")
        
        challenge_text = "‚öîÔ∏è –í–´–ó–û–í –ù–ê –ú–ê–¢–ß!\n\n"
        challenge_text += f"üë§ {message.from_user.username or '–ê–Ω–æ–Ω–∏–º'}\n"
        challenge_text += f"üèÜ {game.club_name}\n"
        challenge_text += f"‚≠ê –°–∏–ª–∞: {game.calculate_team_power():.1f}\n"
        
        if bet_amount > 0:
            challenge_text += f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount:,}‚Ç¨\n\n"
        else:
            challenge_text += "üí∞ –ë–µ–∑ —Å—Ç–∞–≤–∫–∏\n\n"
        
        challenge_text += "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü–†–ò–ù–Ø–¢–¨", callback_data=f"pvp_accept_{match.match_id}"),
            InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"pvp_decline_{match.match_id}")
        )
        
        bot.send_message(opponent_id, challenge_text, reply_markup=keyboard)
        bot.send_message(message.chat.id, f"‚úÖ –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @{username}!")
        
        print(f"üì§ –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç {message.chat.id} –∫ {opponent_id}")
        
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –≤ challenge: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–∑–æ–≤–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('pvp_accept_'))
def handle_pvp_accept(call):
    try:
        match_id = call.data[10:]
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç—å –º–∞—Ç—á: {match_id}")
        print(f"   ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.message.chat.id}")
        
        # –ò—â–µ–º –º–∞—Ç—á
        match = pvp_manager.get_match(match_id)
        
        if not match:
            print(f"‚ùå –ú–∞—Ç—á {match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏!")
            bot.answer_callback_query(call.id, "‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª!")
            return
        
        if match.status != "pending":
            print(f"‚ùå –ú–∞—Ç—á —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å—Ç–∞—Ç—É—Å: {match.status}")
            bot.answer_callback_query(call.id, "‚ùå –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return
        
        if call.message.chat.id != match.opponent_id:
            print(f"‚ùå –ù–µ —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.message.chat.id} != {match.opponent_id}")
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –≤—ã–∑–æ–≤!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏
        opponent_game = get_user_game(match.opponent_id)
        if match.bet_amount > 0 and opponent_game.money < match.bet_amount:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        if match.bet_amount > 0:
            opponent_game.money -= match.bet_amount
            opponent_game.save_game()
            print(f"üí∞ –°–ø–∏—Å–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ {match.bet_amount}‚Ç¨ —Å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ {match.opponent_id}")
        
        print(f"‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–∞—Ç—á: {match_id}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        match = pvp_manager.calculate_pvp_result(match)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        send_pvp_result(match)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á –∏–∑ –ø–∞–º—è—Ç–∏
        if match_id in pvp_manager.active_matches:
            del pvp_manager.active_matches[match_id]
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á: {match_id}")
            
        bot.answer_callback_query(call.id, "‚úÖ –ú–∞—Ç—á –ø—Ä–∏–Ω—è—Ç!")
        
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –≤ pvp_accept: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('pvp_decline_'))
def handle_pvp_decline(call):
    try:
        match_id = call.data[11:]
        print(f"üîÑ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–∞—Ç—á–∞: {match_id}")
        
        match = pvp_manager.get_match(match_id)
        
        if match and match.status == "pending":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É –≤—ã–∑—ã–≤–∞—é—â–µ–º—É
            if match.bet_amount > 0:
                challenger_game = get_user_game(match.challenger_id)
                challenger_game.money += match.bet_amount
                challenger_game.save_game()
                print(f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ {match.bet_amount}‚Ç¨ –≤—ã–∑—ã–≤–∞—é—â–µ–º—É {match.challenger_id}")
            
            match.status = "declined"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            bot.edit_message_text("‚ùå –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω", call.message.chat.id, call.message.message_id)
            bot.send_message(match.challenger_id, "‚ùå –í–∞—à –≤—ã–∑–æ–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            
            # –£–¥–∞–ª—è–µ–º –º–∞—Ç—á –∏–∑ –ø–∞–º—è—Ç–∏
            if match_id in pvp_manager.active_matches:
                del pvp_manager.active_matches[match_id]
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –º–∞—Ç—á: {match_id}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ pvp_decline: {e}")

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=['start'])
def start_command(message):
    if message.from_user.username:
        user_usernames[message.chat.id] = message.from_user.username
    
    game = get_user_game(message.chat.id)
    
    if game.club_name is None:
        keyboard = InlineKeyboardMarkup()
        for club in FOOTBALL_CLUBS.keys():
            keyboard.add(InlineKeyboardButton(club, callback_data=f"club_{club}"))
        
        bot.send_message(message.chat.id, 
            "‚öΩ –§–£–¢–ë–û–õ–¨–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–†\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
            reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, 
            f"üèÜ {game.club_name}\n"
            f"üíµ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\n"
            f"üèÖ –û—á–∫–æ–≤: {game.points}\n"
            f"üìÖ –ù–µ–¥–µ–ª—è: {game.week}\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/play - –°—ã–≥—Ä–∞—Ç—å –º–∞—Ç—á\n"
            "/challenge @user - PvP –º–∞—Ç—á\n"
            "/team - –ú–æ—è –∫–æ–º–∞–Ω–¥–∞")

@bot.message_handler(commands=['play'])
def play_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        bot.send_message(message.chat.id, game.play_match())

@bot.message_handler(commands=['team'])
def team_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        team_info = f"üèÜ {game.club_name}\nüíµ {game.money:,}‚Ç¨\nüèÖ {game.points} –æ—á–∫–æ–≤\n‚≠ê –°–∏–ª–∞: {game.calculate_team_power():.1f}\n\n"
        team_info += "üë• –°–æ—Å—Ç–∞–≤:\n"
        for i, player in enumerate(game.players, 1):
            team_info += f"{i}. {player['name']} ({player['position']}) ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']}\n"
        bot.send_message(message.chat.id, team_info)

@bot.message_handler(commands=['debug_pvp'])
def debug_pvp_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PvP"""
    debug_text = f"üîß PvP –î–ï–ë–ê–ì:\n"
    debug_text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(pvp_manager.active_matches)}\n"
    for match_id, match in pvp_manager.active_matches.items():
        debug_text += f"üéØ {match_id}: {match.challenger_id} vs {match.opponent_id} (—Å—Ç–∞—Ç—É—Å: {match.status})\n"
    
    bot.send_message(message.chat.id, debug_text)

@bot.callback_query_handler(func=lambda call: call.data.startswith('club_'))
def handle_club_selection(call):
    club_name = call.data[5:]
    game = get_user_game(call.message.chat.id)
    result = game.select_club(club_name)
    
    bot.edit_message_text(
        f"{result}\n\n–ò—Å–ø–æ–ª—å–∑—É–π /play –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞!",
        call.message.chat.id,
        call.message.message_id
    )

# === –í–ï–ë–•–£–ö ===
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return 'OK', 200

@app.route('/')
def index():
    return '‚öΩ Football Manager Bot is running!'

def set_webhook():
    webhook_url = f"https://{os.environ.get('RENDER_SERVICE_NAME')}.onrender.com/webhook"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    print(f"Webhook set to: {webhook_url}")

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=5000)
