from flask import Flask, request
import os
import telebot
import random
import json
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# === PvP –°–ò–°–¢–ï–ú–ê –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú ===
class PvPMatch:
    def __init__(self, match_id, challenger_id, opponent_id, bet_amount=0):
        self.match_id = match_id
        self.challenger_id = challenger_id
        self.opponent_id = opponent_id
        self.bet_amount = bet_amount
        self.status = "pending"
        self.score = [0, 0]
        self.winner = None
        self.created_time = time.time()

class RatingSystem:
    def __init__(self):
        self.ratings = {}
    
    def get_rating(self, user_id):
        if user_id not in self.ratings:
            self.ratings[user_id] = {"rating": 1500, "wins": 0, "losses": 0, "draws": 0}
        return self.ratings[user_id]
    
    def update_rating(self, winner_id, loser_id, is_draw=False):
        if is_draw:
            self.ratings[winner_id]["rating"] += 2
            self.ratings[loser_id]["rating"] -= 2
            self.ratings[winner_id]["draws"] += 1
            self.ratings[loser_id]["draws"] += 1
        else:
            rating_diff = self.ratings[loser_id]["rating"] - self.ratings[winner_id]["rating"]
            k = 24
            expected_win = 1 / (1 + 10 ** (rating_diff / 400))
            points = k * (1 - expected_win)
            
            self.ratings[winner_id]["rating"] += points
            self.ratings[loser_id]["rating"] -= points
            self.ratings[winner_id]["wins"] += 1
            self.ratings[loser_id]["losses"] += 1

class PvPManager:
    def __init__(self):
        self.active_matches = {}
        self.pending_requests = {}
        self.rating_system = RatingSystem()
        self.match_counter = 1
        self.load_pvp_data()
    
    def save_pvp_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç PvP –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        pvp_data = {
            'ratings': self.rating_system.ratings,
            'match_counter': self.match_counter,
            'user_usernames': user_usernames
        }
        try:
            with open('/tmp/pvp_data.json', 'w') as f:
                json.dump(pvp_data, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PvP: {e}")
    
    def load_pvp_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç PvP –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('/tmp/pvp_data.json', 'r') as f:
                pvp_data = json.load(f)
                self.rating_system.ratings = pvp_data['ratings']
                self.match_counter = pvp_data['match_counter']
                user_usernames.update(pvp_data['user_usernames'])
                print("‚úÖ PvP –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –ù–µ—Ç PvP –¥–∞–Ω–Ω—ã—Ö, –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {e}")
            self.rating_system.ratings = {}
            self.match_counter = 1
    
    def create_match(self, challenger_id, opponent_id, bet_amount=0):
        match_id = f"match_{self.match_counter}"
        self.match_counter += 1
        
        match = PvPMatch(match_id, challenger_id, opponent_id, bet_amount)
        self.active_matches[match_id] = match
        self.pending_requests[opponent_id] = match_id
        
        self.save_pvp_data()
        return match
    
    def get_match_by_opponent(self, opponent_id):
        match_id = self.pending_requests.get(opponent_id)
        return self.active_matches.get(match_id)
    
    def calculate_pvp_result(self, match):
        challenger_game = get_user_game(match.challenger_id)
        opponent_game = get_user_game(match.opponent_id)
        
        power1 = challenger_game.calculate_team_power()
        power2 = opponent_game.calculate_team_power()
        
        rating1 = self.rating_system.get_rating(match.challenger_id)["rating"]
        rating2 = self.rating_system.get_rating(match.opponent_id)["rating"]
        
        rating_bonus1 = min(rating1 / 150, 8)
        rating_bonus2 = min(rating2 / 150, 8)
        
        total_power1 = power1 + rating_bonus1
        total_power2 = power2 + rating_bonus2
        
        power_diff = total_power1 - total_power2
        
        goals1 = max(0, int(1 + (power_diff / 20) + random.randint(0, 2)))
        goals2 = max(0, int(1 + (-power_diff / 20) + random.randint(0, 2)))
        
        match.score = [goals1, goals2]
        
        if goals1 > goals2:
            match.winner = match.challenger_id
            self.rating_system.update_rating(match.challenger_id, match.opponent_id)
        elif goals2 > goals1:
            match.winner = match.opponent_id
            self.rating_system.update_rating(match.opponent_id, match.challenger_id)
        else:
            match.winner = "draw"
            self.rating_system.update_rating(match.challenger_id, match.opponent_id, is_draw=True)
        
        if match.bet_amount > 0 and match.winner != "draw":
            winner_game = get_user_game(match.winner)
            loser_id = match.opponent_id if match.winner == match.challenger_id else match.challenger_id
            loser_game = get_user_game(loser_id)
            
            prize = int(match.bet_amount * 1.6)
            winner_game.money += prize
            winner_game.save_game()
        
        match.status = "finished"
        self.save_pvp_data()
        return match

pvp_manager = PvPManager()
user_usernames = {}

# === –ë–ê–ó–ê –ö–õ–£–ë–û–í ===
FOOTBALL_CLUBS = {
    "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥": {
        "players": [
            {"name": "–ë–µ–ª–ª–∏–Ω–≥–µ–º", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 89, "defense": 72, "salary": 120000, "value": 180000000},
            {"name": "–í–∏–Ω–∏—Å–∏—É—Å", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 88, "defense": 45, "salary": 110000, "value": 170000000},
            {"name": "–ö—É—Ä—Ç—É–∞", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 25, "defense": 90, "salary": 130000, "value": 60000000},
            {"name": "–ê–ª–∞–≤–∞", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 55, "defense": 84, "salary": 80000, "value": 40000000}
        ]
    },
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": {
        "players": [
            {"name": "–ü–µ–¥—Ä–∏", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 87, "defense": 68, "salary": 100000, "value": 150000000},
            {"name": "–õ–µ–≤–∞–Ω–¥–æ–≤—Å–∫–∏", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 86, "defense": 40, "salary": 120000, "value": 30000000},
            {"name": "–ê—Ä–∞—É—Ö–æ", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 50, "defense": 86, "salary": 90000, "value": 70000000},
            {"name": "–¢–µ—Ä –®—Ç–µ–≥–µ–Ω", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 30, "defense": 88, "salary": 110000, "value": 35000000}
        ]
    },
    "–ú–∞–Ω –°–∏—Ç–∏": {
        "players": [
            {"name": "–•–æ–ª–∞–Ω–Ω", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 91, "defense": 48, "salary": 150000, "value": 180000000},
            {"name": "–î–µ –ë—Ä–æ–π–Ω–µ", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 90, "defense": 65, "salary": 140000, "value": 60000000},
            {"name": "–†–æ–¥—Ä–∏", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 82, "defense": 85, "salary": 120000, "value": 100000000},
            {"name": "–≠–¥–µ—Ä—Å–æ–Ω", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 35, "defense": 87, "salary": 100000, "value": 40000000}
        ]
    },
    "–õ–∏–≤–µ—Ä–ø—É–ª—å": {
        "players": [
            {"name": "–°–∞–ª–∞—Ö", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 88, "defense": 50, "salary": 120000, "value": 65000000},
            {"name": "–í–∞–Ω –î–µ–π–∫", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 55, "defense": 89, "salary": 110000, "value": 45000000},
            {"name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä-–ê—Ä–Ω–æ–ª—å–¥", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 75, "defense": 78, "salary": 100000, "value": 70000000},
            {"name": "–ê–ª–∏—Å—Å–æ–Ω", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 30, "defense": 89, "salary": 100000, "value": 45000000}
        ]
    },
    "–ë–∞–≤–∞—Ä–∏—è": {
        "players": [
            {"name": "–ö–µ–π–Ω", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 90, "defense": 52, "salary": 130000, "value": 90000000},
            {"name": "–ö–∏–º–º–∏—Ö", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 85, "defense": 80, "salary": 120000, "value": 75000000},
            {"name": "–ú—é–ª–ª–µ—Ä", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 84, "defense": 60, "salary": 100000, "value": 25000000},
            {"name": "–ù–æ–π–µ—Ä", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 40, "defense": 86, "salary": 90000, "value": 10000000}
        ]
    }
}

# === –†–ï–ê–õ–¨–ù–´–ï –ò–ì–†–û–ö–ò –î–õ–Ø –¢–†–ê–ù–°–§–ï–†–ù–û–ì–û –†–´–ù–ö–ê ===
REAL_PLAYERS = [
    # –ó–≤–µ–∑–¥–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
    {"name": "–ú–±–∞–ø–ø–µ", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 92, "defense": 40, "price": 4500000, "country": "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "stars": 5},
    {"name": "–•–æ–ª–∞–Ω–Ω", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 91, "defense": 48, "price": 4200000, "country": "üá≥üá¥ –ù–æ—Ä–≤–µ–≥–∏—è", "stars": 5},
    {"name": "–ú–µ—Å—Å–∏", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 90, "defense": 38, "price": 3800000, "country": "üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", "stars": 5},
    {"name": "–î–µ –ë—Ä–æ–π–Ω–µ", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 90, "defense": 65, "price": 4000000, "country": "üáßüá™ –ë–µ–ª—å–≥–∏—è", "stars": 5},
    {"name": "–ö–µ–≤–∏–Ω", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 89, "defense": 70, "price": 3500000, "country": "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è", "stars": 4},
    
    # –ó–∞—â–∏—Ç–Ω–∏–∫–∏
    {"name": "–í–∞–Ω –î–µ–π–∫", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 55, "defense": 89, "price": 3200000, "country": "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "stars": 4},
    {"name": "–†–∞–º–æ—Å", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 60, "defense": 87, "price": 2800000, "country": "üá™üá∏ –ò—Å–ø–∞–Ω–∏—è", "stars": 4},
    {"name": "–ú–∏–ªita–æ", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 58, "defense": 86, "price": 3000000, "country": "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è", "stars": 4},
    
    # –í—Ä–∞—Ç–∞—Ä–∏
    {"name": "–ê–ª–∏—Å—Å–æ–Ω", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 30, "defense": 89, "price": 2500000, "country": "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è", "stars": 4},
    {"name": "–û–±–ª–∏ak", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 35, "defense": 88, "price": 2200000, "country": "üá∏üáÆ –°–ª–æ–≤–µ–Ω–∏—è", "stars": 4},
    
    # –ú–æ–ª–æ–¥—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã
    {"name": "–ú—É–∫–∏–∫–æ", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 84, "defense": 35, "price": 1800000, "country": "üá™üá∏ –ò—Å–ø–∞–Ω–∏—è", "stars": 3},
    {"name": "–ë–µ–ª–õ–ò–Ω–≥–µ–º", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 86, "defense": 68, "price": 2000000, "country": "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ê–Ω–≥–ª–∏—è", "stars": 4},
    {"name": "–ì–∞–≤–∏", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 82, "defense": 62, "price": 1600000, "country": "üá™üá∏ –ò—Å–ø–∞–Ω–∏—è", "stars": 3},
    {"name": "–°–∞–∫a", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 85, "defense": 42, "price": 1900000, "country": "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ê–Ω–≥–ª–∏—è", "stars": 3},
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–≥—Ä–æ–∫–∏
    {"name": "–°–º–æ–ª–æ–≤", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 78, "defense": 38, "price": 1200000, "country": "üá∑üá∫ –†–æ—Å—Å–∏—è", "stars": 3},
    {"name": "–ì–æ–ª–æ–≤–∏–Ω", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 80, "defense": 65, "price": 1500000, "country": "üá∑üá∫ –†–æ—Å—Å–∏—è", "stars": 3},
    {"name": "–î–∑—é–±–∞", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 76, "defense": 45, "price": 1000000, "country": "üá∑üá∫ –†–æ—Å—Å–∏—è", "stars": 2},
    {"name": "–ê–∫–∏–Ω—Ñ–µ–µ–≤", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 25, "defense": 82, "price": 800000, "country": "üá∑üá∫ –†–æ—Å—Å–∏—è", "stars": 2},
]

# === –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ò–ì–†–´ ===
class AdvancedFootballManager:
    def __init__(self, user_id):
        self.user_id = user_id
        self.load_game()
        
        if not hasattr(self, 'points'):
            self.club_name = None
            self.points = 0
            self.money = 10000000
            self.week = 1
            self.players = []
            self.league_teams = [
                {"name": "–ú–µ—á—Ç–∞—Ç–µ–ª–∏ FC", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä—ã", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–¢–∏—Ç–∞–Ω—ã", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–ë—É—Ä–µ–≤–µ—Å—Ç–Ω–∏–∫–∏", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–ú–æ–ª–Ω–∏—è", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–§–µ–Ω–∏–∫—Å", "points": 0, "goals_for": 0, "goals_against": 0}
            ]
            self.academy = {
                "level": 1,
                "training_cost": 500000,
                "next_refresh": 0,
                "current_player": None
            }
        
        self.generate_transfer_market()
    
    def save_game(self):
        game_data = {
            'club_name': self.club_name,
            'points': self.points,
            'money': self.money, 
            'week': self.week,
            'players': self.players,
            'league_teams': self.league_teams,
            'academy': self.academy
        }
        try:
            with open(f'/tmp/football_save_{self.user_id}.json', 'w') as f:
                json.dump(game_data, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_game(self):
        try:
            with open(f'/tmp/football_save_{self.user_id}.json', 'r') as f:
                game_data = json.load(f)
                self.club_name = game_data['club_name']
                self.points = game_data['points']
                self.money = game_data['money']
                self.week = game_data['week'] 
                self.players = game_data['players']
                self.league_teams = game_data['league_teams']
                self.academy = game_data['academy']
                print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–æ–≤–∞—è –∏–≥—Ä–∞: {e}")
    
    def select_club(self, club_name):
        if club_name in FOOTBALL_CLUBS:
            self.club_name = club_name
            club_data = FOOTBALL_CLUBS[club_name]
            self.players = club_data['players'].copy()
            self.save_game()
            return f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {club_name}!\n\n–¢–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –∫–ª—É–±–æ–º –∫ –ø–æ–±–µ–¥–µ! üèÜ"
        return "‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def generate_transfer_market(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫ —Å–æ –∑–≤–µ–∑–¥–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏"""
        self.transfer_players = []
        
        # –ë–µ—Ä–µ–º 6 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        selected_players = random.sample(REAL_PLAYERS, min(6, len(REAL_PLAYERS)))
        
        for player_data in selected_players:
            player = player_data.copy()
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
            player["salary"] = player["price"] // 20
            player["value"] = player["price"]
            self.transfer_players.append(player)
    
    def calculate_team_power(self):
        if not self.players:
            return 50
        total_power = sum(p["attack"] + p["defense"] for p in self.players)
        return total_power / len(self.players)
    
    def play_match(self):
        team_power = self.calculate_team_power()
        opponent_index = (self.week - 1) % (len(self.league_teams) - 1)
        opponent = self.league_teams[opponent_index + 1]
        
        opponent_power = 60 + (self.week * 2) + random.randint(-10, 10)
        
        power_diff = team_power - opponent_power
        my_goals = max(0, int(1 + (power_diff / 20) + random.randint(0, 2)))
        opponent_goals = max(0, int(1 + (-power_diff / 20) + random.randint(0, 2)))
        
        self.league_teams[0]["goals_for"] += my_goals
        self.league_teams[0]["goals_against"] += opponent_goals
        opponent["goals_for"] += opponent_goals
        opponent["goals_against"] += my_goals
        
        if my_goals > opponent_goals:
            result = f"–ü–û–ë–ï–î–ê {my_goals}-{opponent_goals}! üéâ"
            self.points += 3
            self.league_teams[0]["points"] += 3
            prize = 250000
        elif my_goals == opponent_goals:
            result = f"–ù–ò–ß–¨–Ø {my_goals}-{opponent_goals} ü§ù"
            self.points += 1
            self.league_teams[0]["points"] += 1
            opponent["points"] += 1
            prize = 120000
        else:
            result = f"–ü–û–†–ê–ñ–ï–ù–ò–ï {my_goals}-{opponent_goals} üòî"
            opponent["points"] += 3
            prize = 60000
        
        self.money += prize
        self.week += 1
        
        salary_info = ""
        if self.week % 4 == 0:
            total_salary = sum(p["salary"] for p in self.players)
            self.money -= total_salary
            salary_info = f"\nüí∏ –ó–∞—Ä–ø–ª–∞—Ç—ã: -{total_salary:,}‚Ç¨"
        
        self.save_game()
        return f"üéØ –ù–µ–¥–µ–ª—è {self.week-1}\n‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤: {opponent['name']}\n{result}\nüí∞ –ü—Ä–∏–∑: +{prize:,}‚Ç¨{salary_info}\nüèÜ –û—á–∫–æ–≤: {self.points}\nüíµ –ë—é–¥–∂–µ—Ç: {self.money:,}‚Ç¨"
    
    def show_league_table(self):
        sorted_teams = sorted(self.league_teams, key=lambda x: (-x["points"], -(x["goals_for"] - x["goals_against"])))
        
        table = "üèÜ –¢–ê–ë–õ–ò–¶–ê –õ–ò–ì–ò:\n\n"
        table += "‚Ññ  –ö–æ–º–∞–Ω–¥–∞           –û  –ì–ó  –ì–ü  –†\n"
        table += "‚îÄ" * 30 + "\n"
        
        for i, team in enumerate(sorted_teams, 1):
            goals_diff = team["goals_for"] - team["goals_against"]
            goals_diff_str = f"+{goals_diff}" if goals_diff > 0 else str(goals_diff)
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "  "
            table += f"{i:<2}{emoji} {team['name']:<15} {team['points']:<2} {team['goals_for']:<2} {team['goals_against']:<2} {goals_diff_str:<3}\n"
        
        table += f"\nüìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {self.week}"
        return table
    
    def show_transfer_market(self):
        if not self.transfer_players:
            self.generate_transfer_market()
        
        market = "üõí –¢–†–ê–ù–°–§–ï–†–ù–´–ô –†–´–ù–û–ö –°–û –ó–í–ï–ó–î–ê–ú–ò!\n\n"
        for i, player in enumerate(self.transfer_players, 1):
            stars = "‚≠ê" * player.get("stars", 3)
            market += f"{i}. {player['name']} {player['country']}\n"
            market += f"   üìç {player['position']} | ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']}\n"
            market += f"   {stars}\n"
            market += f"   üí∞ {player['price']:,}‚Ç¨\n\n"
        
        market += "üõí –ö–æ–º–∞–Ω–¥—ã:\n/buy [–Ω–æ–º–µ—Ä] - –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n/sell [–Ω–æ–º–µ—Ä] - –ü—Ä–æ–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n/refresh - –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫"
        return market
    
    def buy_player(self, player_num):
        try:
            player_index = int(player_num) - 1
            if player_index < 0 or player_index >= len(self.transfer_players):
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞!"
            
            player = self.transfer_players[player_index]
            
            if self.money < player["price"]:
                return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {player['price']:,}‚Ç¨"
            
            if len(self.players) >= 8:
                return "‚ùå –í –∫–æ–º–∞–Ω–¥–µ –º–∞–∫—Å–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–π –∫–æ–≥–æ-—Ç–æ."
            
            new_player = player.copy()
            new_player["salary"] = player["price"] // 20
            new_player["value"] = player["price"]
            self.players.append(new_player)
            
            self.money -= player["price"]
            self.transfer_players.pop(player_index)
            
            self.save_game()
            return f"‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ü–û–ö–£–ü–ö–ê!\nüë§ {new_player['name']} ({new_player['position']})\n‚≠ê ‚öîÔ∏è{new_player['attack']} üõ°Ô∏è{new_player['defense']}\nüíµ –¶–µ–Ω–∞: {player['price']:,}‚Ç¨\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å: {self.money:,}‚Ç¨"
        
        except ValueError:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /buy [–Ω–æ–º–µ—Ä]"
    
    def sell_player(self, player_num):
        try:
            player_index = int(player_num) - 1
            if player_index < 0 or player_index >= len(self.players):
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞!"
            
            if len(self.players) <= 4:
                return "‚ùå –í –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!"
            
            player = self.players[player_index]
            sell_price = player["value"] * 0.8
            
            self.money += sell_price
            self.players.pop(player_index)
            
            self.save_game()
            return f"‚úÖ –ò–ì–†–û–ö –ü–†–û–î–ê–ù!\nüë§ {player['name']} ({player['position']})\nüíµ –ü–æ–ª—É—á–µ–Ω–æ: {sell_price:,.0f}‚Ç¨\nüí∞ –ë—é–¥–∂–µ—Ç: {self.money:,}‚Ç¨"
        
        except ValueError:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /sell [–Ω–æ–º–µ—Ä]"
    
    def refresh_market(self):
        self.generate_transfer_market()
        return "üîÉ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã!"
    
    def generate_youth_player(self):
        level = self.academy["level"]
        positions = ["–ù–∞–ø–∞–¥–∞—é—â–∏–π", "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "–ó–∞—â–∏—Ç–Ω–∏–∫", "–í—Ä–∞—Ç–∞—Ä—å"]
        names = ["–ù–æ–≤–∏–∫–æ–≤", "–ú–æ–ª–æ–¥—Ü–æ–≤", "–¢–∞–ª–∞–Ω—Ç–æ–≤", "–ë—É–¥—É—â–∏–π", "–ó–≤–µ–∑–¥–æ–≤", "–ù–∞–¥–µ–∂–¥–∏–Ω"]
        
        min_power = 60 + (level - 1) * 5
        max_power = 70 + (level - 1) * 5
        
        position = random.choice(positions)
        if position == "–ù–∞–ø–∞–¥–∞—é—â–∏–π":
            attack = random.randint(min_power, max_power)
            defense = random.randint(30, 50)
        elif position == "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫":
            attack = random.randint(min_power - 5, max_power - 5)
            defense = random.randint(min_power - 10, max_power - 10)
        elif position == "–ó–∞—â–∏—Ç–Ω–∏–∫":
            attack = random.randint(40, 60)
            defense = random.randint(min_power, max_power)
        else:
            attack = random.randint(20, 40)
            defense = random.randint(min_power, max_power)
        
        player = {
            "name": f"{random.choice(names)}-–º–ª.",
            "position": position,
            "attack": attack,
            "defense": defense,
            "salary": 10000 * level,
            "value": 500000 * level,
            "from_academy": True
        }
        
        return player
    
    def upgrade_academy(self):
        current_level = self.academy["level"]
        if current_level >= 5:
            return "‚ùå –ê–∫–∞–¥–µ–º–∏—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! üèÜ"
        
        cost = self.academy["training_cost"]
        if self.money < cost:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {cost:,}‚Ç¨"
        
        self.money -= cost
        self.academy["level"] += 1
        self.academy["training_cost"] *= 2
        
        self.save_game()
        return f"‚úÖ –ê–∫–∞–¥–µ–º–∏—è —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è {self.academy['level']}!\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,}‚Ç¨\nüíµ –û—Å—Ç–∞–ª–æ—Å—å: {self.money:,}‚Ç¨"
    
    def get_academy_player(self):
        if self.academy["current_player"] is None:
            if self.week >= self.academy["next_refresh"]:
                self.academy["current_player"] = self.generate_youth_player()
                self.academy["next_refresh"] = self.week + 5
                self.save_game()
                return "üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –º–æ–ª–æ–¥–æ–π –∏–≥—Ä–æ–∫! –ù–∞–∂–º–∏—Ç–µ 'üë• –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞'"
            else:
                weeks_left = self.academy["next_refresh"] - self.week
                return f"‚è≥ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {weeks_left} –Ω–µ–¥–µ–ª—å"
        
        return "‚úÖ –ï—Å—Ç—å –∏–≥—Ä–æ–∫ –≤ –∞–∫–∞–¥–µ–º–∏–∏! –ù–∞–∂–º–∏—Ç–µ 'üë• –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞'"
    
    def claim_academy_player(self):
        if self.academy["current_player"] is None:
            return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∞–∫–∞–¥–µ–º–∏–∏"
        
        if len(self.players) >= 8:
            return "‚ùå –í –∫–æ–º–∞–Ω–¥–µ –º–∞–∫—Å–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–π—Ç–µ –∫–æ–≥–æ-—Ç–æ."
        
        player = self.academy["current_player"]
        self.players.append(player)
        self.academy["current_player"] = None
        
        self.save_game()
        return f"‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É!\nüë§ {player['name']} ({player['position']})\n‚≠ê ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']}"
    
    def show_academy_info(self):
        academy_info = f"üè´ –ê–ö–ê–î–ï–ú–ò–Ø [–£—Ä. {self.academy['level']}/5]\n\n"
        
        levels = {
            1: "üîπ –ù–∞—á–∏–Ω–∞—é—â–∞—è (60-70 —Å–∏–ª—ã)",
            2: "üî∏ –†–∞–∑–≤–∏–≤–∞—é—â–∞—è (65-75 —Å–∏–ª—ã)", 
            3: "üî∫ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è (70-80 —Å–∏–ª—ã)",
            4: "üèÖ –≠–ª–∏—Ç–Ω–∞—è (75-85 —Å–∏–ª—ã)",
            5: "‚≠ê –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è (80-90 —Å–∏–ª—ã)"
        }
        
        academy_info += f"{levels[self.academy['level']]}\n"
        academy_info += f"üí∞ –°–ª–µ–¥—É—é—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {self.academy['training_cost']:,}‚Ç¨\n\n"
        
        if self.academy["current_player"]:
            player = self.academy["current_player"]
            academy_info += f"üë• –î–æ—Å—Ç—É–ø–µ–Ω –∏–≥—Ä–æ–∫:\n"
            academy_info += f"üë§ {player['name']} ({player['position']})\n"
            academy_info += f"‚≠ê ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']}\n"
        else:
            if self.week >= self.academy["next_refresh"]:
                academy_info += "üîÑ –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫!\n"
            else:
                weeks_left = self.academy["next_refresh"] - self.week
                academy_info += f"‚è≥ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —á–µ—Ä–µ–∑ {weeks_left} –Ω–µ–¥–µ–ª—å\n"
        
        return academy_info

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
user_games = {}

def get_user_game(user_id):
    if user_id not in user_games:
        user_games[user_id] = AdvancedFootballManager(user_id)
    return user_games[user_id]

def find_user_by_username(username):
    username = username.lower()
    for user_id, user_username in user_usernames.items():
        if user_username and user_username.lower() == username:
            return user_id
    return None

def send_pvp_result(match):
    challenger_game = get_user_game(match.challenger_id)
    opponent_game = get_user_game(match.opponent_id)
    
    result_text = f"‚öîÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ê–¢–ß–ê PvP!\n\n"
    result_text += f"üèÜ {challenger_game.club_name} {match.score[0]} - {match.score[1]} {opponent_game.club_name}\n\n"
    
    if match.winner == "draw":
        result_text += "ü§ù –ù–ò–ß–¨–Ø!\n"
        if match.bet_amount > 0:
            challenger_game.money += match.bet_amount
            opponent_game.money += match.bet_amount
            challenger_game.save_game()
            opponent_game.save_game()
            result_text += f"üí∞ –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!"
    else:
        winner_game = get_user_game(match.winner)
        result_text += f"üéâ –ü–û–ë–ï–î–ò–õ: {winner_game.club_name}!\n"
        
        if match.bet_amount > 0:
            prize = int(match.bet_amount * 1.6)
            result_text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: {prize:,}‚Ç¨\n"
    
    bot.send_message(match.challenger_id, result_text)
    bot.send_message(match.opponent_id, result_text)

# === –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ –ò –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=['start'])
def start_command(message):
    if message.from_user.username:
        user_usernames[message.chat.id] = message.from_user.username
    
    game = get_user_game(message.chat.id)
    
    if game.club_name is None:
        keyboard = InlineKeyboardMarkup()
        clubs = list(FOOTBALL_CLUBS.keys())
        
        for i in range(0, len(clubs), 2):
            row = []
            row.append(InlineKeyboardButton(clubs[i], callback_data=f"club_{clubs[i]}"))
            if i + 1 < len(clubs):
                row.append(InlineKeyboardButton(clubs[i+1], callback_data=f"club_{clubs[i+1]}"))
            keyboard.add(*row)
        
        bot.send_message(message.chat.id, 
            "‚öΩ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –§–£–¢–ë–û–õ–¨–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† 2025! üèÜ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª—É–±:",
            reply_markup=keyboard)
    else:
        show_main_menu(message.chat.id, game)

def show_main_menu(chat_id, game):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞", callback_data="menu_team"))
    keyboard.add(InlineKeyboardButton("‚öΩ –°—ã–≥—Ä–∞—Ç—å –º–∞—Ç—á", callback_data="menu_play"))
    keyboard.add(InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–≥–∏", callback_data="menu_table"))
    keyboard.add(InlineKeyboardButton("üõí –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫", callback_data="menu_market"))
    keyboard.add(InlineKeyboardButton("üè´ –ê–∫–∞–¥–µ–º–∏—è", callback_data="menu_academy"))
    keyboard.add(InlineKeyboardButton("üíµ –§–∏–Ω–∞–Ω—Å—ã", callback_data="menu_money"))
    keyboard.add(InlineKeyboardButton("‚öîÔ∏è PvP", callback_data="menu_pvp"))
    
    bot.send_message(chat_id,
        f"üèÜ {game.club_name}\n"
        f"üíµ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\n"
        f"üèÖ –û—á–∫–æ–≤: {game.points}\n"
        f"üìÖ –ù–µ–¥–µ–ª—è: {game.week}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard)

# === PvP –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=['challenge'])
def challenge_command(message):
    if message.from_user.username:
        user_usernames[message.chat.id] = message.from_user.username
        
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /challenge @username [—Å—Ç–∞–≤–∫–∞]")
        return
    
    username = parts[1].replace('@', '')
    bet_amount = 0
    
    if len(parts) > 2:
        try:
            bet_amount = int(parts[2])
            if bet_amount < 0:
                bot.send_message(message.chat.id, "‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
                return
            if game.money < bet_amount:
                bot.send_message(message.chat.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏! –ù—É–∂–Ω–æ {bet_amount:,}‚Ç¨")
                return
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: /challenge @username [—Å—Ç–∞–≤–∫–∞]")
            return
    
    opponent_id = find_user_by_username(username)
    
    if not opponent_id:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ username –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")
        return
    
    if opponent_id == message.chat.id:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return
    
    match = pvp_manager.create_match(message.chat.id, opponent_id, bet_amount)
    
    challenger_game = get_user_game(message.chat.id)
    opponent_game = get_user_game(opponent_id)
    
    challenge_text = f"‚öîÔ∏è –í–´–ó–û–í –ù–ê –ú–ê–¢–ß!\n\n"
    challenge_text += f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.username or '–ê–Ω–æ–Ω–∏–º'}\n"
    challenge_text += f"üèÜ –ö–ª—É–±: {challenger_game.club_name}\n"
    challenge_text += f"‚≠ê –°–∏–ª–∞: {challenger_game.calculate_team_power():.1f}\n"
    
    if bet_amount > 0:
        challenge_text += f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount:,}‚Ç¨\n\n"
    else:
        challenge_text += f"üí∞ –°—Ç–∞–≤–∫–∞: –Ω–µ—Ç\n\n"
    
    challenge_text += f"–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –ü–†–ò–ù–Ø–¢–¨", callback_data=f"pvp_accept_{match.match_id}"))
    keyboard.add(InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"pvp_decline_{match.match_id}"))
    
    bot.send_message(opponent_id, challenge_text, reply_markup=keyboard)
    bot.send_message(message.chat.id, f"‚úÖ –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É @{username}!")

@bot.message_handler(commands=['rating'])
def rating_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
        return
    
    rating_data = pvp_manager.rating_system.get_rating(message.chat.id)
    
    rating_text = f"üìä –í–ê–® –†–ï–ô–¢–ò–ù–ì PvP\n\n"
    rating_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_data['rating']}\n"
    rating_text += f"‚úÖ –ü–æ–±–µ–¥: {rating_data['wins']}\n"
    rating_text += f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {rating_data['losses']}\n"
    rating_text += f"ü§ù –ù–∏—á—å–∏—Ö: {rating_data['draws']}\n\n"
    
    if rating_data['wins'] + rating_data['losses'] + rating_data['draws'] > 0:
        total = rating_data['wins'] + rating_data['losses'] + rating_data['draws']
        win_rate = (rating_data['wins'] / total) * 100
        rating_text += f"üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%"
    
    bot.send_message(message.chat.id, rating_text)

@bot.message_handler(commands=['top'])
def top_command(message):
    top_players = sorted(
        [(user_id, data) for user_id, data in pvp_manager.rating_system.ratings.items()],
        key=lambda x: x[1]['rating'],
        reverse=True
    )[:10]
    
    top_text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í PvP\n\n"
    
    for i, (user_id, data) in enumerate(top_players, 1):
        try:
            user_game = get_user_game(user_id)
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üî∏"
            username = user_usernames.get(user_id, "–ê–Ω–æ–Ω–∏–º")
            top_text += f"{emoji} {i}. {user_game.club_name} ({username}) - {data['rating']}‚≠ê\n"
        except:
            continue
    
    bot.send_message(message.chat.id, top_text)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö ===
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    game = get_user_game(call.message.chat.id)
    
    if call.data.startswith("club_"):
        club_name = call.data[5:]
        result = game.select_club(club_name)
        bot.edit_message_text(
            f"{result}\n\n–¢–µ–ø–µ—Ä—å –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ {club_name}! üéâ",
            call.message.chat.id,
            call.message.message_id
        )
        show_main_menu(call.message.chat.id, game)
    
    elif call.data == "menu_team":
        team_info = f"üèÜ {game.club_name}\nüí∞ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\nüèÖ –û—á–∫–æ–≤: {game.points}\n‚≠ê –°–∏–ª–∞: {game.calculate_team_power():.1f}\n\n"
        team_info += "üë• –°–æ—Å—Ç–∞–≤:\n"
        for i, player in enumerate(game.players, 1):
            team_info += f"{i}. {player['name']} ({player['position']})\n"
            team_info += f"   ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']} üí∞{player['salary']:,}‚Ç¨\n"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        
        bot.edit_message_text(team_info, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "menu_play":
        result = game.play_match()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(result, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "menu_table":
        table = game.show_league_table()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(table, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "menu_market":
        market = game.show_transfer_market()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫", callback_data="market_refresh"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(market, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "menu_academy":
        academy_info = game.show_academy_info()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_check"))
        keyboard.add(InlineKeyboardButton("‚ö° –£–ª—É—á—à–∏—Ç—å", callback_data="academy_upgrade"))
        keyboard.add(InlineKeyboardButton("üë• –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_claim"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(academy_info, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "menu_money":
        stats = f"üíµ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\nüèÖ –û—á–∫–æ–≤: {game.points}\nüìÖ –ù–µ–¥–µ–ª—è: {game.week}"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(stats, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "menu_pvp":
        pvp_text = "‚öîÔ∏è PvP –°–ò–°–¢–ï–ú–ê\n\n"
        pvp_text += "üéÆ –ò–≥—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!\n\n"
        pvp_text += "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        pvp_text += "/challenge @username [—Å—Ç–∞–≤–∫–∞] - –í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
        pvp_text += "/rating - –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥\n"
        pvp_text += "/top - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
        pvp_text += "üí° –°–æ–≤–µ—Ç: –£–ª—É—á—à–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –ø–æ–±–µ–∂–¥–∞—Ç—å –≤ PvP!"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="pvp_rating"))
        keyboard.add(InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="pvp_top"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        
        bot.edit_message_text(pvp_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "menu_back":
        show_main_menu(call.message.chat.id, game)
    
    elif call.data == "market_refresh":
        result = game.refresh_market()
        market = game.show_transfer_market()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫", callback_data="market_refresh"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(f"{result}\n\n{market}", call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "academy_check":
        result = game.get_academy_player()
        academy_info = game.show_academy_info()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_check"))
        keyboard.add(InlineKeyboardButton("‚ö° –£–ª—É—á—à–∏—Ç—å", callback_data="academy_upgrade"))
        keyboard.add(InlineKeyboardButton("üë• –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_claim"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(f"{result}\n\n{academy_info}", call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "academy_upgrade":
        result = game.upgrade_academy()
        academy_info = game.show_academy_info()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_check"))
        keyboard.add(InlineKeyboardButton("‚ö° –£–ª—É—á—à–∏—Ç—å", callback_data="academy_upgrade"))
        keyboard.add(InlineKeyboardButton("üë• –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_claim"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(f"{result}\n\n{academy_info}", call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "academy_claim":
        result = game.claim_academy_player()
        academy_info = game.show_academy_info()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_check"))
        keyboard.add(InlineKeyboardButton("‚ö° –£–ª—É—á—à–∏—Ç—å", callback_data="academy_upgrade"))
        keyboard.add(InlineKeyboardButton("üë• –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_claim"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
        bot.edit_message_text(f"{result}\n\n{academy_info}", call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "pvp_rating":
        rating_data = pvp_manager.rating_system.get_rating(call.message.chat.id)
        rating_text = f"üìä –í–ê–® –†–ï–ô–¢–ò–ù–ì PvP\n\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_data['rating']}\n‚úÖ –ü–æ–±–µ–¥: {rating_data['wins']}\n‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {rating_data['losses']}\nü§ù –ù–∏—á—å–∏—Ö: {rating_data['draws']}"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –í –º–µ–Ω—é PvP", callback_data="menu_pvp"))
        
        bot.edit_message_text(rating_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "pvp_top":
        top_players = sorted(
            [(user_id, data) for user_id, data in pvp_manager.rating_system.ratings.items()],
            key=lambda x: x[1]['rating'],
            reverse=True
        )[:10]
        
        top_text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í PvP\n\n"
        
        for i, (user_id, data) in enumerate(top_players, 1):
            try:
                user_game = get_user_game(user_id)
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üî∏"
                username = user_usernames.get(user_id, "–ê–Ω–æ–Ω–∏–º")
                top_text += f"{emoji} {i}. {user_game.club_name} ({username}) - {data['rating']}‚≠ê\n"
            except:
                continue
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –í –º–µ–Ω—é PvP", callback_data="menu_pvp"))
        
        bot.edit_message_text(top_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif call.data.startswith('pvp_accept_'):
        match_id = call.data[10:]
        match = pvp_manager.active_matches.get(match_id)
        
        if not match or match.status != "pending":
            bot.answer_callback_query(call.id, "‚ùå –í—ã–∑–æ–≤ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω!")
            return
        
        if call.message.chat.id != match.opponent_id:
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –≤—ã–∑–æ–≤!")
            return
        
        opponent_game = get_user_game(match.opponent_id)
        if match.bet_amount > 0 and opponent_game.money < match.bet_amount:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏! –ù—É–∂–Ω–æ {match.bet_amount:,}‚Ç¨")
            return
        
        match.status = "accepted"
        
        if match.bet_amount > 0:
            challenger_game = get_user_game(match.challenger_id)
            challenger_game.money -= match.bet_amount
            opponent_game.money -= match.bet_amount
            challenger_game.save_game()
            opponent_game.save_game()
        
        match = pvp_manager.calculate_pvp_result(match)
        send_pvp_result(match)
        bot.answer_callback_query(call.id, "‚úÖ –ú–∞—Ç—á –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    
    elif call.data.startswith('pvp_decline_'):
        match_id = call.data[11:]
        match = pvp_manager.active_matches.get(match_id)
        
        if match and match.status == "pending":
            match.status = "cancelled"
            bot.edit_message_text("‚ùå –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω!", call.message.chat.id, call.message.message_id)
            bot.send_message(match.challenger_id, "‚ùå –í–∞—à –≤—ã–∑–æ–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

# === –°–¢–ê–†–´–ï –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=['team'])
def team_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        team_info = f"üèÜ {game.club_name}\nüí∞ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\nüèÖ –û—á–∫–æ–≤: {game.points}\n‚≠ê –°–∏–ª–∞: {game.calculate_team_power():.1f}\n\n"
        team_info += "üë• –°–æ—Å—Ç–∞–≤:\n"
        for i, player in enumerate(game.players, 1):
            team_info += f"{i}. {player['name']} ({player['position']})\n"
            team_info += f"   ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']} üí∞{player['salary']:,}‚Ç¨\n"
        bot.send_message(message.chat.id, team_info)

@bot.message_handler(commands=['play'])
def play_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        bot.send_message(message.chat.id, game.play_match())

@bot.message_handler(commands=['table'])
def table_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        bot.send_message(message.chat.id, game.show_league_table())

@bot.message_handler(commands=['market'])
def market_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        bot.send_message(message.chat.id, game.show_transfer_market())

@bot.message_handler(commands=['buy'])
def buy_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        parts = message.text.split()
        if len(parts) == 2:
            bot.send_message(message.chat.id, game.buy_player(parts[1]))
        else:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /buy [–Ω–æ–º–µ—Ä]")

@bot.message_handler(commands=['sell'])
def sell_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        parts = message.text.split()
        if len(parts) == 2:
            bot.send_message(message.chat.id, game.sell_player(parts[1]))
        else:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /sell [–Ω–æ–º–µ—Ä]")

@bot.message_handler(commands=['refresh'])
def refresh_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        bot.send_message(message.chat.id, game.refresh_market())

@bot.message_handler(commands=['money', 'points'])
def money_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        bot.send_message(message.chat.id, f"üíµ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\nüèÖ –û—á–∫–æ–≤: {game.points}\nüìÖ –ù–µ–¥–µ–ª—è: {game.week}")

@bot.message_handler(commands=['academy'])
def academy_command(message):
    game = get_user_game(message.chat.id)
    if game.club_name is None:
        start_command(message)
    else:
        academy_info = game.show_academy_info()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_check"))
        keyboard.add(InlineKeyboardButton("‚ö° –£–ª—É—á—à–∏—Ç—å", callback_data="academy_upgrade"))
        keyboard.add(InlineKeyboardButton("üë• –ó–∞–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="academy_claim"))
        bot.send_message(message.chat.id, academy_info, reply_markup=keyboard)

# === –û–ë–†–ê–ë–û–¢–ö–ê USERNAME ===
@bot.message_handler(func=lambda message: True)
def track_usernames(message):
    if message.from_user.username:
        user_usernames[message.chat.id] = message.from_user.username
        pvp_manager.save_pvp_data()

# === –í–ï–ë–•–£–ö –ò –ó–ê–ü–£–°–ö ===
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return 'OK', 200

@app.route('/')
def index():
    return '‚öΩ Football Manager Bot is running! üèÜ'

def set_webhook():
    webhook_url = f"https://{os.environ.get('RENDER_SERVICE_NAME')}.onrender.com/webhook"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    print(f"Webhook set to: {webhook_url}")

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=5000)
