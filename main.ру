from flask import Flask, request
import os
import telebot
import random
import json

BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

class AdvancedFootballManager:
    def __init__(self):
        self.load_game()
        
        if not hasattr(self, 'points'):
            self.points = 0
            self.money = 10000000
            self.week = 1
            self.players = [
                {"name": "–ò–≤–∞–Ω–æ–≤", "position": "–ù–∞–ø–∞–¥–∞—é—â–∏–π", "attack": 75, "defense": 40, "salary": 50000, "value": 800000},
                {"name": "–ü–µ—Ç—Ä–æ–≤", "position": "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "attack": 65, "defense": 60, "salary": 45000, "value": 700000},
                {"name": "–°–∏–¥–æ—Ä–æ–≤", "position": "–ó–∞—â–∏—Ç–Ω–∏–∫", "attack": 45, "defense": 75, "salary": 40000, "value": 600000},
                {"name": "–ö–æ–∑–ª–æ–≤", "position": "–í—Ä–∞—Ç–∞—Ä—å", "attack": 30, "defense": 85, "salary": 60000, "value": 900000}
            ]
            self.league_teams = [
                {"name": "–ú–µ—á—Ç–∞—Ç–µ–ª–∏ FC", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä—ã", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–¢–∏—Ç–∞–Ω—ã", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–ë—É—Ä–µ–≤–µ—Å—Ç–Ω–∏–∫–∏", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–ú–æ–ª–Ω–∏—è", "points": 0, "goals_for": 0, "goals_against": 0},
                {"name": "–§–µ–Ω–∏–∫—Å", "points": 0, "goals_for": 0, "goals_against": 0}
            ]
        
        self.generate_transfer_market()
    
    def save_game(self):
        game_data = {
            'points': self.points,
            'money': self.money, 
            'week': self.week,
            'players': self.players,
            'league_teams': self.league_teams
        }
        try:
            with open('/tmp/football_save.json', 'w') as f:
                json.dump(game_data, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_game(self):
        try:
            with open('/tmp/football_save.json', 'r') as f:
                game_data = json.load(f)
                self.points = game_data['points']
                self.money = game_data['money']
                self.week = game_data['week'] 
                self.players = game_data['players']
                self.league_teams = game_data['league_teams']
                print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–æ–≤–∞—è –∏–≥—Ä–∞: {e}")
    
    def generate_transfer_market(self):
        positions = ["–ù–∞–ø–∞–¥–∞—é—â–∏–π", "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫", "–ó–∞—â–∏—Ç–Ω–∏–∫", "–í—Ä–∞—Ç–∞—Ä—å"]
        names = ["–°–æ–∫–æ–ª–æ–≤", "–û—Ä–ª–æ–≤", "–õ–µ–±–µ–¥–µ–≤", "–ú–µ–¥–≤–µ–¥–µ–≤", "–í–æ–ª–∫–æ–≤", "–°–æ–ª–æ–≤—å–µ–≤", "–ú–æ—Ä–æ–∑–æ–≤", "–ó–∞–π—Ü–µ–≤"]
        
        self.transfer_players = []
        for _ in range(6):
            position = random.choice(positions)
            attack = random.randint(70, 88)
            defense = random.randint(65, 85)
            price = random.randint(1000000, 3000000)
            
            player = {
                "name": random.choice(names),
                "position": position,
                "attack": attack,
                "defense": defense,
                "price": price,
                "country": random.choice(["üá∑üá∫ –†–æ—Å—Å–∏—è", "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è", "üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è"])
            }
            self.transfer_players.append(player)
    
    def calculate_team_power(self):
        if not self.players:
            return 50
        total_power = sum(p["attack"] + p["defense"] for p in self.players)
        return total_power / len(self.players)
    
    def play_match(self):
        team_power = self.calculate_team_power()
        opponent_index = (self.week - 1) % (len(self.league_teams) - 1)
        opponent = self.league_teams[opponent_index + 1]
        
        opponent_power = 60 + (self.week * 2) + random.randint(-10, 10)
        
        power_diff = team_power - opponent_power
        my_goals = max(0, int(1 + (power_diff / 20) + random.randint(0, 2)))
        opponent_goals = max(0, int(1 + (-power_diff / 20) + random.randint(0, 2)))
        
        self.league_teams[0]["goals_for"] += my_goals
        self.league_teams[0]["goals_against"] += opponent_goals
        opponent["goals_for"] += opponent_goals
        opponent["goals_against"] += my_goals
        
        if my_goals > opponent_goals:
            result = f"–ü–û–ë–ï–î–ê {my_goals}-{opponent_goals}! üéâ"
            self.points += 3
            self.league_teams[0]["points"] += 3
            prize = 250000
        elif my_goals == opponent_goals:
            result = f"–ù–ò–ß–¨–Ø {my_goals}-{opponent_goals} ü§ù"
            self.points += 1
            self.league_teams[0]["points"] += 1
            opponent["points"] += 1
            prize = 120000
        else:
            result = f"–ü–û–†–ê–ñ–ï–ù–ò–ï {my_goals}-{opponent_goals} üòî"
            opponent["points"] += 3
            prize = 60000
        
        self.money += prize
        self.week += 1
        
        salary_info = ""
        if self.week % 4 == 0:
            total_salary = sum(p["salary"] for p in self.players)
            self.money -= total_salary
            salary_info = f"\nüí∏ –ó–∞—Ä–ø–ª–∞—Ç—ã: -{total_salary:,}‚Ç¨"
        
        self.save_game()
        return f"üéØ –ù–µ–¥–µ–ª—è {self.week-1}\n‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤: {opponent['name']}\n{result}\nüí∞ –ü—Ä–∏–∑: +{prize:,}‚Ç¨{salary_info}\nüèÜ –û—á–∫–æ–≤: {self.points}\nüíµ –ë—é–¥–∂–µ—Ç: {self.money:,}‚Ç¨"
    
    def show_league_table(self):
        sorted_teams = sorted(self.league_teams, key=lambda x: (-x["points"], -(x["goals_for"] - x["goals_against"])))
        
        table = "üèÜ –¢–ê–ë–õ–ò–¶–ê –õ–ò–ì–ò:\n\n"
        table += "‚Ññ  –ö–æ–º–∞–Ω–¥–∞           –û  –ì–ó  –ì–ü  –†\n"
        table += "‚îÄ" * 30 + "\n"
        
        for i, team in enumerate(sorted_teams, 1):
            goals_diff = team["goals_for"] - team["goals_against"]
            goals_diff_str = f"+{goals_diff}" if goals_diff > 0 else str(goals_diff)
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "  "
            table += f"{i:<2}{emoji} {team['name']:<15} {team['points']:<2} {team['goals_for']:<2} {team['goals_against']:<2} {goals_diff_str:<3}\n"
        
        table += f"\nüìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {self.week}"
        return table
    
    def show_transfer_market(self):
        if not self.transfer_players:
            self.generate_transfer_market()
        
        market = "üõí –¢–†–ê–ù–°–§–ï–†–ù–´–ô –†–´–ù–û–ö:\n\n"
        for i, player in enumerate(self.transfer_players, 1):
            stars = "‚≠ê" * (player["attack"] // 20)
            market += f"{i}. {player['name']} {player['country']}\n"
            market += f"   üìç {player['position']} | ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']}\n"
            market += f"   {stars}\n"
            market += f"   üí∞ {player['price']:,}‚Ç¨\n\n"
        
        market += "üõí –ö–æ–º–∞–Ω–¥—ã:\n/buy [–Ω–æ–º–µ—Ä] - –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n/sell [–Ω–æ–º–µ—Ä] - –ü—Ä–æ–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n/refresh - –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫"
        return market
    
    def buy_player(self, player_num):
        try:
            player_index = int(player_num) - 1
            if player_index < 0 or player_index >= len(self.transfer_players):
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞!"
            
            player = self.transfer_players[player_index]
            
            if self.money < player["price"]:
                return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {player['price']:,}‚Ç¨"
            
            if len(self.players) >= 8:
                return "‚ùå –í –∫–æ–º–∞–Ω–¥–µ –º–∞–∫—Å–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–π –∫–æ–≥–æ-—Ç–æ."
            
            new_player = player.copy()
            new_player["salary"] = player["price"] // 20
            new_player["value"] = player["price"]
            self.players.append(new_player)
            
            self.money -= player["price"]
            self.transfer_players.pop(player_index)
            
            self.save_game()
            return f"‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ü–û–ö–£–ü–ö–ê!\nüë§ {new_player['name']} ({new_player['position']})\n‚≠ê ‚öîÔ∏è{new_player['attack']} üõ°Ô∏è{new_player['defense']}\nüíµ –¶–µ–Ω–∞: {player['price']:,}‚Ç¨\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å: {self.money:,}‚Ç¨"
        
        except ValueError:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /buy [–Ω–æ–º–µ—Ä]"
    
    def sell_player(self, player_num):
        try:
            player_index = int(player_num) - 1
            if player_index < 0 or player_index >= len(self.players):
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞!"
            
            if len(self.players) <= 4:
                return "‚ùå –í –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!"
            
            player = self.players[player_index]
            sell_price = player["value"] * 0.8
            
            self.money += sell_price
            self.players.pop(player_index)
            
            self.save_game()
            return f"‚úÖ –ò–ì–†–û–ö –ü–†–û–î–ê–ù!\nüë§ {player['name']} ({player['position']})\nüíµ –ü–æ–ª—É—á–µ–Ω–æ: {sell_price:,.0f}‚Ç¨\nüí∞ –ë—é–¥–∂–µ—Ç: {self.money:,}‚Ç¨"
        
        except ValueError:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /sell [–Ω–æ–º–µ—Ä]"
    
    def refresh_market(self):
        self.generate_transfer_market()
        return "üîÉ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!"

game = AdvancedFootballManager()

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id,
        "‚öΩ –§–£–¢–ë–û–õ–¨–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ü–†–û-–õ–ò–ì–ê! üèÜ\n\n"
        "üéÆ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:\n"
        "/team - –ú–æ—è –∫–æ–º–∞–Ω–¥–∞\n"
        "/play - –°—ã–≥—Ä–∞—Ç—å –º–∞—Ç—á\n"
        "/table - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–≥–∏\n\n"
        "üõí –¢–†–ê–ù–°–§–ï–†–´:\n"
        "/market - –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫\n"
        "/buy [N] - –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
        "/sell [N] - –ü—Ä–æ–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
        "/refresh - –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫\n\n"
        "üíº –§–ò–ù–ê–ù–°–´:\n"
        "/money - –ë—é–¥–∂–µ—Ç\n"
        "/points - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è!"
    )

@bot.message_handler(commands=['play'])
def play_match(message):
    bot.send_message(message.chat.id, game.play_match())

@bot.message_handler(commands=['team'])
def show_team(message):
    team_info = f"üèÜ –ú–µ—á—Ç–∞—Ç–µ–ª–∏ FC\nüí∞ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\nüèÖ –û—á–∫–æ–≤: {game.points}\n‚≠ê –°–∏–ª–∞: {game.calculate_team_power():.1f}\n\n"
    team_info += "üë• –°–æ—Å—Ç–∞–≤:\n"
    for i, player in enumerate(game.players, 1):
        team_info += f"{i}. {player['name']} ({player['position']})\n"
        team_info += f"   ‚öîÔ∏è{player['attack']} üõ°Ô∏è{player['defense']} üí∞{player['salary']:,}‚Ç¨\n"
    bot.send_message(message.chat.id, team_info)

@bot.message_handler(commands=['table'])
def show_table(message):
    bot.send_message(message.chat.id, game.show_league_table())

@bot.message_handler(commands=['market'])
def show_market(message):
    bot.send_message(message.chat.id, game.show_transfer_market())

@bot.message_handler(commands=['buy'])
def buy_player(message):
    parts = message.text.split()
    if len(parts) == 2:
        bot.send_message(message.chat.id, game.buy_player(parts[1]))
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /buy [–Ω–æ–º–µ—Ä]")

@bot.message_handler(commands=['sell'])
def sell_player(message):
    parts = message.text.split()
    if len(parts) == 2:
        bot.send_message(message.chat.id, game.sell_player(parts[1]))
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /sell [–Ω–æ–º–µ—Ä]")

@bot.message_handler(commands=['refresh'])
def refresh_market(message):
    bot.send_message(message.chat.id, game.refresh_market())

@bot.message_handler(commands=['money', 'points'])
def show_stats(message):
    bot.send_message(message.chat.id, f"üíµ –ë—é–¥–∂–µ—Ç: {game.money:,}‚Ç¨\nüèÖ –û—á–∫–æ–≤: {game.points}\nüìÖ –ù–µ–¥–µ–ª—è: {game.week}")

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return 'OK', 200

@app.route('/')
def index():
    return '‚öΩ Football Manager Bot is running! üèÜ'

def set_webhook():
    webhook_url = f"https://{os.environ.get('RENDER_SERVICE_NAME')}.onrender.com/webhook"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    print(f"Webhook set to: {webhook_url}")

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=5000)
